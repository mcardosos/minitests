// Package report implements the Azure ARM Report service API version 1.0.0.
//
// Test Infrastructure for AutoRest
package report

// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

import (
	"net/http"

	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
)

const (
	// APIVersion is the version of the Report
	APIVersion = "1.0.0"

	// DefaultBaseURI is the default URI used for the service Report
	DefaultBaseURI = "http://localhost"
)

// ManagementClient is the base client for Report.
type ManagementClient struct {
	autorest.Client
	BaseURI        string
	SubscriptionID string
}

// New creates an instance of the ManagementClient client.
func New(subscriptionID string) ManagementClient {
	return NewWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewWithBaseURI creates an instance of the ManagementClient client.
func NewWithBaseURI(baseURI string, subscriptionID string) ManagementClient {
	return ManagementClient{
		Client:         autorest.NewClientWithUserAgent(UserAgent()),
		BaseURI:        baseURI,
		SubscriptionID: subscriptionID,
	}
}

// GetReport get test coverage report
func (client ManagementClient) GetReport() (result SetInt32, err error) {
	req, err := client.GetReportPreparer()
	if err != nil {
		return result, autorest.NewErrorWithError(err, "report/ManagementClient", "GetReport", nil, "Failure preparing request")
	}

	resp, err := client.GetReportSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "report/ManagementClient", "GetReport", resp, "Failure sending request")
	}

	result, err = client.GetReportResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "report/ManagementClient", "GetReport", resp, "Failure responding to request")
	}

	return
}

// GetReportPreparer prepares the GetReport request.
func (client ManagementClient) GetReportPreparer() (*http.Request, error) {
	req := http.Request{}
	return autorest.Prepare(&req,
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/report"))
}

// GetReportSender sends the GetReport request. The method will close the
// http.Response Body if it receives an error.
func (client ManagementClient) GetReportSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetReportResponder handles the response to the GetReport request. The method always
// closes the http.Response Body.
func (client ManagementClient) GetReportResponder(resp *http.Response) (result SetInt32, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
