// Package validationgroup implements the Azure ARM Validationgroup service
// API version 1.0.0.
// 
// Test Infrastructure for AutoRest. No server backend exists for these tests.
package validationgroup

// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
)

const (
    // APIVersion is the version of the Validationgroup
    APIVersion = "1.0.0"

    // DefaultBaseURI is the default URI used for the service Validationgroup
    DefaultBaseURI = "http://localhost"
)

// ManagementClient is the base client for Validationgroup.
type ManagementClient struct {
    autorest.Client
    BaseURI string
    APIVersion string
    SubscriptionID string
}

// New creates an instance of the ManagementClient client.
func New(subscriptionID string, aPIVersion string) ManagementClient {
    return ManagementClient{
        Client: autorest.NewClientWithUserAgent(UserAgent()),
        BaseURI: DefaultBaseURI,
        APIVersion: APIVersion,
        SubscriptionID: subscriptionID,
    }
}

// GetWithConstantInPath sends the get with constant in path request.
//
func (client ManagementClient) GetWithConstantInPath(constantParam string) (result autorest.Response, err error) {
    req, err := client.GetWithConstantInPathPreparer(constantParam)
    if err != nil {
        return result, autorest.NewErrorWithError(err, "validationgroup.ManagementClient", "GetWithConstantInPath", nil , "Failure preparing request")
    }

    resp, err := client.GetWithConstantInPathSender(req)
    if err != nil {
        result.Response = resp
        return result, autorest.NewErrorWithError(err, "validationgroup.ManagementClient", "GetWithConstantInPath", resp, "Failure sending request")
    }

    result, err = client.GetWithConstantInPathResponder(resp)
    if err != nil {
        err = autorest.NewErrorWithError(err, "validationgroup.ManagementClient", "GetWithConstantInPath", resp, "Failure responding to request")
    }

    return
}

// GetWithConstantInPathPreparer prepares the GetWithConstantInPath request.
func (client ManagementClient) GetWithConstantInPathPreparer(constantParam string) (*http.Request, error) {
    pathParameters := map[string]interface{} {
    "constantParam": autorest.Encode("Path",constantParam),
    }

    return autorest.Prepare(&http.Request{},
                autorest.AsGet(),
                autorest.WithBaseURL(client.BaseURI),
                autorest.WithPathParameters("/validation/constantsInPath/{constantParam}/value",pathParameters))
}

// GetWithConstantInPathSender sends the GetWithConstantInPath request. The method will close the
// http.Response Body if it receives an error.
func (client ManagementClient) GetWithConstantInPathSender(req *http.Request) (*http.Response, error) {
    return autorest.SendWithSender(client, req)
}

// GetWithConstantInPathResponder handles the response to the GetWithConstantInPath request. The method always
// closes the http.Response Body.
func (client ManagementClient) GetWithConstantInPathResponder(resp *http.Response) (result autorest.Response, err error) { 
    err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByClosing())
    result.Response = resp
    return
}

// PostWithConstantInBody sends the post with constant in body request.
//
func (client ManagementClient) PostWithConstantInBody(constantParam string, body *Product) (result Product, err error) {
    req, err := client.PostWithConstantInBodyPreparer(constantParam, body)
    if err != nil {
        return result, autorest.NewErrorWithError(err, "validationgroup.ManagementClient", "PostWithConstantInBody", nil , "Failure preparing request")
    }

    resp, err := client.PostWithConstantInBodySender(req)
    if err != nil {
        result.Response = autorest.Response{Response: resp}
        return result, autorest.NewErrorWithError(err, "validationgroup.ManagementClient", "PostWithConstantInBody", resp, "Failure sending request")
    }

    result, err = client.PostWithConstantInBodyResponder(resp)
    if err != nil {
        err = autorest.NewErrorWithError(err, "validationgroup.ManagementClient", "PostWithConstantInBody", resp, "Failure responding to request")
    }

    return
}

// PostWithConstantInBodyPreparer prepares the PostWithConstantInBody request.
func (client ManagementClient) PostWithConstantInBodyPreparer(constantParam string, body *Product) (*http.Request, error) {
    pathParameters := map[string]interface{} {
    "constantParam": autorest.Encode("Path",constantParam),
    }

    preparer := autorest.CreatePreparer(
                        autorest.AsJSON(),
                        autorest.AsPost(),
                        autorest.WithBaseURL(client.BaseURI),
                        autorest.WithPathParameters("/validation/constantsInPath/{constantParam}/value",pathParameters))
    if body != nil {
        preparer = autorest.DecoratePreparer(preparer,
                            autorest.WithJSON(body))
    }
    return preparer.Prepare(&http.Request{})
}

// PostWithConstantInBodySender sends the PostWithConstantInBody request. The method will close the
// http.Response Body if it receives an error.
func (client ManagementClient) PostWithConstantInBodySender(req *http.Request) (*http.Response, error) {
    return autorest.SendWithSender(client, req)
}

// PostWithConstantInBodyResponder handles the response to the PostWithConstantInBody request. The method always
// closes the http.Response Body.
func (client ManagementClient) PostWithConstantInBodyResponder(resp *http.Response) (result Product, err error) { 
    err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
    result.Response = autorest.Response{Response: resp}
    return
}

// ValidationOfBody validates body parameters on the method. See swagger for
// details.
//
// resourceGroupName is required string between 3 and 10 chars with pattern
// [a-zA-Z0-9]+. id is required int multiple of 10 from 100 to 1000.
func (client ManagementClient) ValidationOfBody(resourceGroupName string, id int32, body *Product) (result Product, err error) {
    req, err := client.ValidationOfBodyPreparer(resourceGroupName, id, body)
    if err != nil {
        return result, autorest.NewErrorWithError(err, "validationgroup.ManagementClient", "ValidationOfBody", nil , "Failure preparing request")
    }

    resp, err := client.ValidationOfBodySender(req)
    if err != nil {
        result.Response = autorest.Response{Response: resp}
        return result, autorest.NewErrorWithError(err, "validationgroup.ManagementClient", "ValidationOfBody", resp, "Failure sending request")
    }

    result, err = client.ValidationOfBodyResponder(resp)
    if err != nil {
        err = autorest.NewErrorWithError(err, "validationgroup.ManagementClient", "ValidationOfBody", resp, "Failure responding to request")
    }

    return
}

// ValidationOfBodyPreparer prepares the ValidationOfBody request.
func (client ManagementClient) ValidationOfBodyPreparer(resourceGroupName string, id int32, body *Product) (*http.Request, error) {
    pathParameters := map[string]interface{} {
    "id": autorest.Encode("Path",id),
    "resourceGroupName": autorest.Encode("Path",resourceGroupName),
    "subscriptionId": autorest.Encode("Path",client.SubscriptionID),
    }

    queryParameters := map[string]interface{} {
    "api-version": client.APIVersion,
    }

    preparer := autorest.CreatePreparer(
                        autorest.AsJSON(),
                        autorest.AsPut(),
                        autorest.WithBaseURL(client.BaseURI),
                        autorest.WithPathParameters("/fakepath/{subscriptionId}/{resourceGroupName}/{id}",pathParameters),
                        autorest.WithQueryParameters(queryParameters))
    if body != nil {
        preparer = autorest.DecoratePreparer(preparer,
                            autorest.WithJSON(body))
    }
    return preparer.Prepare(&http.Request{})
}

// ValidationOfBodySender sends the ValidationOfBody request. The method will close the
// http.Response Body if it receives an error.
func (client ManagementClient) ValidationOfBodySender(req *http.Request) (*http.Response, error) {
    return autorest.SendWithSender(client, req)
}

// ValidationOfBodyResponder handles the response to the ValidationOfBody request. The method always
// closes the http.Response Body.
func (client ManagementClient) ValidationOfBodyResponder(resp *http.Response) (result Product, err error) { 
    err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
    result.Response = autorest.Response{Response: resp}
    return
}

// ValidationOfMethodParameters validates input parameters on the method. See
// swagger for details.
//
// resourceGroupName is required string between 3 and 10 chars with pattern
// [a-zA-Z0-9]+. id is required int multiple of 10 from 100 to 1000.
func (client ManagementClient) ValidationOfMethodParameters(resourceGroupName string, id int32) (result Product, err error) {
    req, err := client.ValidationOfMethodParametersPreparer(resourceGroupName, id)
    if err != nil {
        return result, autorest.NewErrorWithError(err, "validationgroup.ManagementClient", "ValidationOfMethodParameters", nil , "Failure preparing request")
    }

    resp, err := client.ValidationOfMethodParametersSender(req)
    if err != nil {
        result.Response = autorest.Response{Response: resp}
        return result, autorest.NewErrorWithError(err, "validationgroup.ManagementClient", "ValidationOfMethodParameters", resp, "Failure sending request")
    }

    result, err = client.ValidationOfMethodParametersResponder(resp)
    if err != nil {
        err = autorest.NewErrorWithError(err, "validationgroup.ManagementClient", "ValidationOfMethodParameters", resp, "Failure responding to request")
    }

    return
}

// ValidationOfMethodParametersPreparer prepares the ValidationOfMethodParameters request.
func (client ManagementClient) ValidationOfMethodParametersPreparer(resourceGroupName string, id int32) (*http.Request, error) {
    pathParameters := map[string]interface{} {
    "id": autorest.Encode("Path",id),
    "resourceGroupName": autorest.Encode("Path",resourceGroupName),
    "subscriptionId": autorest.Encode("Path",client.SubscriptionID),
    }

    queryParameters := map[string]interface{} {
    "api-version": client.APIVersion,
    }

    return autorest.Prepare(&http.Request{},
                autorest.AsGet(),
                autorest.WithBaseURL(client.BaseURI),
                autorest.WithPathParameters("/fakepath/{subscriptionId}/{resourceGroupName}/{id}",pathParameters),
                autorest.WithQueryParameters(queryParameters))
}

// ValidationOfMethodParametersSender sends the ValidationOfMethodParameters request. The method will close the
// http.Response Body if it receives an error.
func (client ManagementClient) ValidationOfMethodParametersSender(req *http.Request) (*http.Response, error) {
    return autorest.SendWithSender(client, req)
}

// ValidationOfMethodParametersResponder handles the response to the ValidationOfMethodParameters request. The method always
// closes the http.Response Body.
func (client ManagementClient) ValidationOfMethodParametersResponder(resp *http.Response) (result Product, err error) { 
    err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
    result.Response = autorest.Response{Response: resp}
    return
}

